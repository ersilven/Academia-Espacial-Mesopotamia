@page
@using AcaEspacial.Data
@using AcaEspacial.Servicios
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Web
@using System.Security.Claims
@inject AcademiaContext db
@inject SecurityEncrypt se
@attribute [AllowAnonymous]

@functions {
    public async Task<IActionResult> OnGetAsync(string paramSesion, string paramClave, string paramKey, string paramIV)
    {
        PaswordHasher p = new PaswordHasher();
        string returnUrl = Url.Content("/");

        var clave = HttpUtility.UrlDecodeToBytes(paramClave);
        var key = HttpUtility.UrlDecodeToBytes(paramKey);
        var IV = HttpUtility.UrlDecodeToBytes(paramIV);

        if (paramSesion == null || paramClave == null) return LocalRedirect(returnUrl);
        var l = await db.Usuario.Include(x => x.UsuarioRoles).ThenInclude(x => x.IDRolNavigation)
        .Include(x=>x.UsuarioEstatus).ThenInclude(x=>x.IDEstatusNavigation)
        .Include(x=>x.UsuarioPass)
        .FirstOrDefaultAsync(x => x.Username.ToUpper().Equals(paramSesion.ToUpper()));

        string contraseña = string.Empty;

        l.UsuarioPass.ToList().ForEach(c =>
        {
            contraseña = c.Pass.ToString();
        });

        if (p.VerifyHashedPassword(contraseña, se.DecryptStringFromBytes_Aes(clave, key, IV)))
        {

            try
            {
                // Clear the existing external cookie
                await HttpContext
                    .SignOutAsync(
                        CookieAuthenticationDefaults.AuthenticationScheme);
            }
            catch { }

            var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, $@"{l.Nombre}"),
                    new Claim("IdUsuario", l.IDUsuario.ToString())

            };
            l.UsuarioRoles.ToList().ForEach(r =>
                {
                    claims.Add(new Claim(ClaimTypes.Role, r.IDRolNavigation.Nombre.ToString()));
                });

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties
                {
                    //AllowRefresh = <bool>,
                    // Refreshing the authentication session should be allowed.

                    //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
                    // The time at which the authentication ticket expires. A
                    // value set here overrides the ExpireTimeSpan option of
                    // CookieAuthenticationOptions set with AddCookie.

                    //IsPersistent = true,
                    // Whether the authentication session is persisted across
                    // multiple requests. When used with cookies, controls
                    // whether the cookie's lifetime is absolute (matching the
                    // lifetime of the authentication ticket) or session-based.

                    //IssuedUtc = <DateTimeOffset>,
                    // The time at which the authentication ticket was issued.

                    RedirectUri = this.Request.Host.Value
                    //RedirectUri = <string>
                    // The full path or absolute URI to be used as an http
                    // redirect response value.
                };
            try
            {
                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(identity), authProperties);

            }
            catch (Exception ex)
            {
                string error = ex.Message;
            }

        }
        return LocalRedirect(returnUrl);
    }

}
